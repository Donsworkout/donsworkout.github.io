{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/reactive-ch11","result":{"data":{"markdownRemark":{"id":"d8605e6f-0bfb-5f15-a6c4-4297c1f4dde8","html":"<h2 id=\"11-context\" style=\"position:relative;\"><a href=\"#11-context\" aria-label=\"11 context permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11. Context</h2>\n<h3 id=\"111-context-란\" style=\"position:relative;\"><a href=\"#111-context-%EB%9E%80\" aria-label=\"111 context 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11.1 Context 란?</h3>\n<h4 id=\"일반적인-의미\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%EC%9D%98%EB%AF%B8\" aria-label=\"일반적인 의미 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반적인 의미</h4>\n<ul>\n<li>어떠한 상항에서 그 상황을 처리하기 위해 필요한 정보</li>\n</ul>\n<h4 id=\"in-reactor\" style=\"position:relative;\"><a href=\"#in-reactor\" aria-label=\"in reactor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In reactor</h4>\n<ul>\n<li>Reactor 구성요소간 전파되는 key, value 형태의 저장소</li>\n<li>구독이 발생할 때 마다 해당 구독과 연결되어 하나의 Context 가 생김</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Context 기본 예제\n *  - contextWrite() Operator로 Context에 데이터 쓰기 작업을 할 수 있다.\n *  - Context.put()으로 Context에 데이터를 쓸 수 있다.\n *  - deferContextual() Operator로 Context에 데이터 읽기 작업을 할 수 있다.\n *  - Context.get()으로 Context에서 데이터를 읽을 수 있다.\n *  - transformDeferredContextual() Operator로 Operator 중간에서 Context에 데이터 읽기 작업을 할 수 있다.\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example11_1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Mono</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">deferContextual</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">-></span>\n                <span class=\"token class-name\">Mono</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">doOnNext</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# just doOnNext : {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">subscribeOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Schedulers</span><span class=\"token punctuation\">.</span><span class=\"token function\">boundedElastic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">publishOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Schedulers</span><span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">transformDeferredContextual</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token punctuation\">(</span>mono<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> mono<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> data <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contextWrite</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">-></span> context<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lastName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jobs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contextWrite</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">-></span> context<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"firstName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Steve\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# onNext: {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예제 코드에서 <code class=\"language-text\">contextWrite</code> Opearator 가 context 에 데이터를 쓰는 부분임을 알 수 있다.</p>\n<h4 id=\"context-에-쓰인-데이터-읽기\" style=\"position:relative;\"><a href=\"#context-%EC%97%90-%EC%93%B0%EC%9D%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9D%BD%EA%B8%B0\" aria-label=\"context 에 쓰인 데이터 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context 에 쓰인 데이터 읽기</h4>\n<p>읽는 방식은 두가지 입니다</p>\n<ol>\n<li>원본 데이터 소스 레벨에서 읽는 방식 : <code class=\"language-text\">deferContextual</code></li>\n<li>Operator 체인 중간에서 익는 방식 : <code class=\"language-text\">transformDeferredContextual</code></li>\n</ol>\n<p>11-1 예제에서 두 case 모두 볼 수 있는데, <code class=\"language-text\">deferContextual</code> 같은 경우 Context 에 저장된 데이터와 원본 데이터 소스의 처리를 지연시키는 역할을 합니다. 또한 파라미터로 정의된 람다 표현식의 람다 파라미터 ctx 는 Context 타입이 아니라 ContextView 타입인데, Context 에 데이터를 읽을 때는 이를 사용해야 한다는 것을 알 수 있습니다. (쓸 때는 그냥 Context)</p>\n<h3 id=\"112-자주-사용되는-context-관련-api\" style=\"position:relative;\"><a href=\"#112-%EC%9E%90%EC%A3%BC-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-context-%EA%B4%80%EB%A0%A8-api\" aria-label=\"112 자주 사용되는 context 관련 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11.2 자주 사용되는 Context 관련 API</h3>\n<ol>\n<li>\n<p><code class=\"language-text\">put(key, value)</code> : key / value 형태로 Context 에 값을 쓴다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">of(key1, value2, key2, value2...)</code> : key / value 형태로 Context에 여러개의 값을 쓴다</p>\n</li>\n<li>\n<p><code class=\"language-text\">putAll(contextView)</code> : 현재 Context 와 파라미터로 입력된 ContextView 를 merge 한다</p>\n</li>\n<li>\n<p><code class=\"language-text\">delete(key)</code> : Context 에서 key 에 해당하는 value 를 삭제한다</p>\n</li>\n</ol>\n<h4 id=\"contextview-api\" style=\"position:relative;\"><a href=\"#contextview-api\" aria-label=\"contextview api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ContextView API</h4>\n<ol>\n<li>\n<p><code class=\"language-text\">get(key)</code> : ContextView 에서 key 에 해당하는 value 를 반환한다</p>\n</li>\n<li>\n<p><code class=\"language-text\">getOrEmpty(key)</code> : ContextView 에서 key 에 해당하는 value 를 Optional 로 래핑해서 반환한다</p>\n</li>\n<li>\n<p><code class=\"language-text\">getOrDefault(key, default value)</code> : ContextView 에서 key 에 해당하는 value 를 가져오고, 해당하는 value 가 없으면 기본값 제공</p>\n</li>\n<li>\n<p><code class=\"language-text\">hasKey(key)</code> : ContextView 에서 특정 key 가 존재하는지 확인한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">isEmpty</code> : Context 가 비어있는지 확인한다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">size</code> : Context 내에 있는 key/value 의 개수를 반환한다.</p>\n</li>\n</ol>\n<h3 id=\"113-context-의-특징\" style=\"position:relative;\"><a href=\"#113-context-%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"113 context 의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11.3 Context 의 특징</h3>\n<ul>\n<li>Context 는 구독이 발생할 때 마다 하나의 Context 가 해당 구독에 연결된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Context의 특징 예제\n *  - Context는 각각의 구독을 통해 Reactor Sequence에 연결 되며 체인의 각 Operator는 연결된 Context에 접근할 수 있어야 한다.\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example11_5</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"company\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mono <span class=\"token operator\">=</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">deferContextual</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">-></span>\n                        <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Company: \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">publishOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Schedulers</span><span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        mono<span class=\"token punctuation\">.</span><span class=\"token function\">contextWrite</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">-></span> context<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# subscribe1 onNext: {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        mono<span class=\"token punctuation\">.</span><span class=\"token function\">contextWrite</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">-></span> context<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Microsoft\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# subscribe2 onNext: {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Context 는 Operator 체인의 아래에서 위로 전파된다.</li>\n<li>동일한 key 에 대해 값을 중복 저장시, Operator 체인에서 가장 위쪽에 위치한 contextWrite() 이 저장한 값으로 덮어쓴다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Context의 특징 예제\n *  - Context는 Operator 체인의 아래에서부터 위로 전파된다.\n *      - 따라서 Operator 체인 상에서 Context read 메서드가 Context write 메서드 밑에 있을 경우에는 write된 값을 read할 수 없다.\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example11_6</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"company\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> key2 <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Mono</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">deferContextual</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">-></span>\n                <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">publishOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Schedulers</span><span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contextWrite</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">-></span> context<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bill\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">transformDeferredContextual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mono<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n                    mono<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> data <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>key2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Steve\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contextWrite</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">-></span> context<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# onNext: {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Inner Sequence 내부에서는 외부 Context 에 저장된 데이터를 읽을 수 없다.</li>\n<li>Inner Sequence 외부에서는 Inner Sequence 내부 Context 에 저장된 데이터를 읽을 수 없다. (마치 프로그래밍 언어의 scope 같은 느낌)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Context의 특징\n *  - inner Sequence 내부에서는 외부 Context에 저장된 데이터를 읽을 수 있다.\n *  - inner Sequence 외부에서는 inner Sequence 내부 Context에 저장된 데이터를  읽을 수 없다.\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example11_7</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">\"company\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mono</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Steve\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">transformDeferredContextual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stringMono<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n                    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">-></span>\n                <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">deferContextual</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">-></span>\n                    <span class=\"token class-name\">Mono</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">transformDeferredContextual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mono<span class=\"token punctuation\">,</span> innerCtx<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span>\n                                mono<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> data <span class=\"token operator\">+</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">+</span> innerCtx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">contextWrite</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">-></span> context<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CEO\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">publishOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Schedulers</span><span class=\"token punctuation\">.</span><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">contextWrite</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">-></span> context<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# onNext: {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드에서 flatMap 내부 시퀀스에서 쓴 Context 의 role 값은 외부에서 읽지 못한다.</p>\n<h4 id=\"context-활용-예제\" style=\"position:relative;\"><a href=\"#context-%ED%99%9C%EC%9A%A9-%EC%98%88%EC%A0%9C\" aria-label=\"context 활용 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context 활용 예제</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Context 활용 예제\n *  - 직교성을 가지는 정보를 표현할 때 주로 사용된다.\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example11_8</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">HEADER_AUTH_TOKEN</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"authToken\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mono <span class=\"token operator\">=</span>\n                <span class=\"token function\">postBook</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcd-1111-3533-2809\"</span>\n                                <span class=\"token punctuation\">,</span> <span class=\"token string\">\"Reactor's Bible\"</span>\n                                <span class=\"token punctuation\">,</span><span class=\"token string\">\"Kevin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">contextWrite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token constant\">HEADER_AUTH_TOKEN</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"eyJhbGciOi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        mono<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# onNext: {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">postBook</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Mono</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span>\n                        <span class=\"token class-name\">Mono</span>\n                            <span class=\"token punctuation\">.</span><span class=\"token function\">deferContextual</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">-></span>\n                                    <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">HEADER_AUTH_TOKEN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>tuple <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">String</span> response <span class=\"token operator\">=</span> <span class=\"token string\">\"POST the book(\"</span> <span class=\"token operator\">+</span> tuple<span class=\"token punctuation\">.</span><span class=\"token function\">getT1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBookName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> tuple<span class=\"token punctuation\">.</span><span class=\"token function\">getT1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAuthor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\") with token: \"</span> <span class=\"token operator\">+</span>\n                            tuple<span class=\"token punctuation\">.</span><span class=\"token function\">getT2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// HTTP POST 전송을 했다고 가정</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> isbn<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> bookName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> author<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드의 main 시퀀스의 가장 아래쪽에서 contextWrite 로 토큰 정보를 저장하기 때문에 체인 어느 위치에서든 Context 에 접근할 수 있다.</p>\n<p>이렇게 Context 는 이렇게 인증 정보 같은 직교성(독립성) 을 가지는 정보를 전송하는데 적합하다.</p>","fields":{"slug":"/posts/2023-05-31---reactive-ch11//posts/reactive-ch11","tagSlugs":["/tag/---/","/tag/-/"]},"frontmatter":{"date":"2023-05-31T23:46:37.121Z","description":"책 읽은거 정리하기, 스프링으로 시작하는 리액티브 프로그래밍","tags":["스프링으로 시작하는 리액티브 프로그래밍","리액티브 프로그래밍"],"title":"Chapter 11. Context","socialImage":null}}},"pageContext":{"slug":"/posts/2023-05-31---reactive-ch11//posts/reactive-ch11"}},"staticQueryHashes":["251939775","2764776372","401334301"]}