{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/reactive-ch1","result":{"data":{"markdownRemark":{"id":"e46de7e6-8a95-5b81-9c76-16a36fed3e83","html":"<h2 id=\"1-리액티브-시스템과-리액티브-프로그래밍\" style=\"position:relative;\"><a href=\"#1-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%EC%8B%9C%EC%8A%A4%ED%85%9C%EA%B3%BC-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"1 리액티브 시스템과 리액티브 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 리액티브 시스템과 리액티브 프로그래밍</h2>\n<h3 id=\"11-리액티브-시스템이란\" style=\"position:relative;\"><a href=\"#11-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%B4%EB%9E%80\" aria-label=\"11 리액티브 시스템이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 리액티브 시스템이란</h3>\n<p>리액티브 시스템은 단어 그대로 <strong>반응을 잘 하는 시스템</strong> 입니다.\n책에서는 클라이언트의 요청에 즉각 반응함으로서 지연 시간을 최소화 한다라고 표현 했는데, 보통 리액티브가 아닌 시스템도 즉각 반응은 하기 때문에 좀 더 넓은 의미로 해석하여 보면 좋을 것 같습니다.</p>\n<h3 id=\"12-리액티브-선언문\" style=\"position:relative;\"><a href=\"#12-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%EC%84%A0%EC%96%B8%EB%AC%B8\" aria-label=\"12 리액티브 선언문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2 리액티브 선언문</h3>\n<p><a href=\"https://www.reactivemanifesto.org/ko\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.reactivemanifesto.org/ko</a></p>\n<p>리액티브 선언문에서 지향하는 리액티브 시스템의 설계 원칙은 아래 그림 하나로 명확하게 설명 됩니다.</p>\n<p><img src=\"/fce587059f8872d7915bc557932cd3d3/reactive-traits-ko.svg\" alt=\"reactive-traits-ko\"></p>\n<h4 id=\"1-means\" style=\"position:relative;\"><a href=\"#1-means\" aria-label=\"1 means permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Means</h4>\n<p>리액티브 시스템에서 주요 통신 수단으로 무엇을 사용할 것인지를 나타냅니다.<br>\n리액티브 시스템은 비동기 메시지 기반의 통신을 사용합니다.</p>\n<h4 id=\"2-form\" style=\"position:relative;\"><a href=\"#2-form\" aria-label=\"2 form permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Form</h4>\n<p>1번의 메시지 기반 통신을 통하여 어떠한 <strong>형태</strong>를 지니는 시스템으로 형성되는지를 나타냅니다.<br>\n그림에서처럼 리액티브 시스템은 <strong>탄력성</strong>과 <strong>회복성</strong>을 가지는 시스템이여야 합니다.</p>\n<ul>\n<li>탄력성 : 시스템 작업량이 변화하더라도 항상 일정한 응답을 유지하여야 하는 성질</li>\n<li>회복성 : 시스템에 장애가 발생하더라도 응답성을 유지하는 성질</li>\n</ul>\n<h4 id=\"3-value\" style=\"position:relative;\"><a href=\"#3-value\" aria-label=\"3 value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Value</h4>\n<p>리액티브 시스템의 핵심 가치로, Means 의 비동기 메시지 기반 처리로 탄력성과 회복성을 갖추어 어떠한 상황에도 즉각적으로 응답 가능한 시스템을 구축하는 것을 의미합니다.</p>\n<h3 id=\"13-리액티브-프로그래밍이란\" style=\"position:relative;\"><a href=\"#13-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\" aria-label=\"13 리액티브 프로그래밍이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3 리액티브 프로그래밍이란</h3>\n<p>리액티브 프로그래밍은 리액티브 선언문의 설계 원칙에 잘 부합하는 비동기 Non-blocking 통신을 위한 프로그래밍 모델이라고 볼 수 있겠습니다. <a href=\"https://donsworkout.github.io/posts/async-nonblocking\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이전 글</a> 에서 처럼 Non-blcking 과 비동기는 다른 개념이니 참고하면 좋을 것 같습니다.</p>\n<h3 id=\"14--15-리액티브-프로그래밍의-특징--선언형-프로그래밍\" style=\"position:relative;\"><a href=\"#14--15-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%8A%B9%EC%A7%95--%EC%84%A0%EC%96%B8%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"14  15 리액티브 프로그래밍의 특징  선언형 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.4 ~ 1.5 리액티브 프로그래밍의 특징 + 선언형 프로그래밍</h3>\n<blockquote>\n<p>In computing, reactive programming is a declarative programming paradigm concerned with data streams and the propagation of change.</p>\n</blockquote>\n<ul>\n<li>위키피디아 - 리액티브 프로그래밍</li>\n</ul>\n<p>컴퓨팅 분야에서 리액티브 프로그래밍은 데이터 스트림 및 변화 전파와 관련된 선언적 프로그래밍 패러다임이다.</p>\n<h4 id=\"1-imperative-programming-명령형-프로그래밍\" style=\"position:relative;\"><a href=\"#1-imperative-programming-%EB%AA%85%EB%A0%B9%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"1 imperative programming 명령형 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. imperative programming (명령형 프로그래밍)</h4>\n<p>전통적인 프로그래밍 형태로, C나 Java 처럼 컴퓨터가 수행할 동작을 순서대로 명시해 놓은 형태입니다.</p>\n<h4 id=\"2-declarative-programming-선언형-프로그래밍\" style=\"position:relative;\"><a href=\"#2-declarative-programming-%EC%84%A0%EC%96%B8%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"2 declarative programming 선언형 프로그래밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. declarative programming (선언형 프로그래밍)</h4>\n<p>선언형 프로그래밍은 실행할 동작을 구체적으로 명시하는 명령형 프로그래밍과 달리 실행할 동작을 구체적으로 명시하지 않고 단순한 목표만 선언하는 방식입니다.</p>\n<h4 id=\"그래서-둘의-차이는-구체적으로-뭘까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%91%98%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94-%EA%B5%AC%EC%B2%B4%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%AD%98%EA%B9%8C\" aria-label=\"그래서 둘의 차이는 구체적으로 뭘까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 둘의 차이는 구체적으로 뭘까?</h4>\n<p>여러 문서를 보고 느낀 차이는 바로 <strong>추상화의 정도</strong> 입니다.<br>\n명령형 프로그래밍은 어떠한 동작을 수행할때 방법을 정확히 명시하는데에 비해, 선언형 프로그래밍은 조금 두루뭉술하게 명령합니다.\n코드로 보면 감이 더 잘 올듯 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">-></span> number <span class=\"token operator\">></span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">mapToInt</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">-></span> number<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 예시는 흔히 쓰는 java 의 스트림 API 를 사용한 예제인데, for 문 같은 구체적인 반복문을 안쓰고 “필터링 해줘~”, “그 숫자 다 더해줘” 처럼 메서드만 선언하고 구체적인 동작은 스트림 내부에서 처리하게 됩니다. 이것이 바로 선언형 프로그래밍입니다. <a href=\"https://kotlinlang.org/docs/collections-overview.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">코틀린 컬렉션 API</a> 에서는 더욱 적극적으로 선언형 프로그래밍 방식을 사용하고 있습니다.</p>\n<h3 id=\"16-리액티브-프로그래밍-코드-구성\" style=\"position:relative;\"><a href=\"#16-%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%BD%94%EB%93%9C-%EA%B5%AC%EC%84%B1\" aria-label=\"16 리액티브 프로그래밍 코드 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.6 리액티브 프로그래밍 코드 구성</h3>\n<p>우리가 실제로 작성하는 리액티브 프로그래밍 코드는 크게 Publisher, Subscriber, Data source, Operator 등으로 구성됩니다.\n특히 Publisher 과 Subscriber 은 리액티브 프로그래밍 전반적으로 계속 등장하는 용어이니 잘 알아두는것이 좋겠습니다.</p>\n<h4 id=\"publisher\" style=\"position:relative;\"><a href=\"#publisher\" aria-label=\"publisher permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Publisher</h4>\n<p>리액티브 프로그래밍에서는 입력으로 들어오는 데이터를 제공하는 역할을 한다는 의미입니다.<br>\n보통 발행자, 생산자로 불립니다.</p>\n<h4 id=\"subscriber\" style=\"position:relative;\"><a href=\"#subscriber\" aria-label=\"subscriber permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Subscriber</h4>\n<p>Subscriber 은 Publisher 가 제공하는 데이터를 전달받아 사용하는 주체입니다.<br>\n보통 구독자라고 불리나, 데이터를 소비하는 관점에서는 소비자라고 불리기도 합니다.</p>\n<h4 id=\"data-source\" style=\"position:relative;\"><a href=\"#data-source\" aria-label=\"data source permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Source</h4>\n<p>Publisher 의 입력으로 들어오는 데이터를 대표하는 용어이며, 이는 Data Stream 이라고 불리기도 합니다.</p>\n<h4 id=\"operator\" style=\"position:relative;\"><a href=\"#operator\" aria-label=\"operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Operator</h4>\n<p>Publisher 로 부터 전달된 데이터가 Subscriber 로 전달되기 전에 가공 처리를 담당하는 것이 Operator 입니다.<br>\n선언형 프로그래밍에서 map filter reduce 등을 떠올리면 좋을 것 같습니다.</p>","fields":{"slug":"/posts/2023-05-07---reactive-ch1//posts/reactive-ch1","tagSlugs":["/tag/---/","/tag/-/"]},"frontmatter":{"date":"2023-05-07T23:46:37.121Z","description":"책 읽은거 정리하기, 스프링으로 시작하는 리액티브 프로그래밍 ","tags":["스프링으로 시작하는 리액티브 프로그래밍","리액티브 프로그래밍"],"title":"Chapter 1. 리액티브 시스템과 리액티브 프로그래밍","socialImage":{"publicURL":"/static/fce587059f8872d7915bc557932cd3d3/reactive-traits-ko.svg"}}}},"pageContext":{"slug":"/posts/2023-05-07---reactive-ch1//posts/reactive-ch1"}},"staticQueryHashes":["251939775","2764776372","401334301"]}