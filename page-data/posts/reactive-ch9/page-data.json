{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/reactive-ch9","result":{"data":{"markdownRemark":{"id":"9be06071-3c48-5544-b046-2198499df998","html":"<h2 id=\"9-sinks\" style=\"position:relative;\"><a href=\"#9-sinks\" aria-label=\"9 sinks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. Sinks</h2>\n<h3 id=\"91-sinks-란\" style=\"position:relative;\"><a href=\"#91-sinks-%EB%9E%80\" aria-label=\"91 sinks 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.1 Sinks 란?</h3>\n<p>Publisher와 Subscriber의 기능을 모두 지니는 Processor 의 기능을 개선한 것이며, Processor 과 관련된 API 는 Reactor 3.5.0 부터 완전히 제거될 예정입니다.</p>\n<p>Sinks 는 리액티브 스트림즈의 Signal 을 프로그래밍 방식으로 푸시할 수 있는 구조이며 Flux 또는 Mono 의 의미 체계를 가집니다.</p>\n<p>지금까지 배운 방식은 flux 나 mono 가 onNext 와 같은 Signal 을 내부적으로 전송해 주는 방식이였지만, Sinks 를 이용하면 명시적으로 Signal 을 전송할 수 있습니다. (기존에는 generate, create 등 오퍼레이터 사용)</p>\n<h3 id=\"그렇다면-sinks-를-사용하는-것과-operator-을-사용하여-signal-을-전송하는-방식은-어떤-차이인가\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-sinks-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%83%EA%B3%BC-operator-%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-signal-%EC%9D%84-%EC%A0%84%EC%86%A1%ED%95%98%EB%8A%94-%EB%B0%A9%EC%8B%9D%EC%9D%80-%EC%96%B4%EB%96%A4-%EC%B0%A8%EC%9D%B4%EC%9D%B8%EA%B0%80\" aria-label=\"그렇다면 sinks 를 사용하는 것과 operator 을 사용하여 signal 을 전송하는 방식은 어떤 차이인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면 Sinks 를 사용하는 것과 Operator 을 사용하여 Signal 을 전송하는 방식은 어떤 차이인가</h3>\n<p>Operator 기반 방식은 싱글스레드 기반이고, Sinks 는 멀티스레드 방식으로 Signal 을 전송해도 스레드 안정성을 보장한다.</p>\n<h3 id=\"92-sinks-종류-및-특징\" style=\"position:relative;\"><a href=\"#92-sinks-%EC%A2%85%EB%A5%98-%EB%B0%8F-%ED%8A%B9%EC%A7%95\" aria-label=\"92 sinks 종류 및 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9.2 Sinks 종류 및 특징</h3>\n<p>Reactor 에서 Sinks 를 사용하여 시그널을 전송하는 방식은 두가지 입니다.\n첫째는 Sinks.One 을 사용하는 것이고 둘째는 Sinks.Many 를 사용하는 것입니다.</p>\n<h4 id=\"sinksone\" style=\"position:relative;\"><a href=\"#sinksone\" aria-label=\"sinksone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sinks.One</h4>\n<blockquote>\n<p>한 건의 데이터를 프로그래밍 방식으로 emit 하는 역할을 하기도 하고, Mono 방식으로 Subscriber 가 데이터를 소비할 수 있도록 해 주는 Sinks 의 스펙</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Sinks.One 예제\n *  - emit 된 데이터 중에서 단 하나의 데이터만 Subscriber에게 전달한다. 나머지 데이터는 Drop 됨.\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example9_4</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Sinks<span class=\"token punctuation\">.</span>One</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sinkOne <span class=\"token operator\">=</span> <span class=\"token class-name\">Sinks</span><span class=\"token punctuation\">.</span><span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> mono <span class=\"token operator\">=</span> sinkOne<span class=\"token punctuation\">.</span><span class=\"token function\">asMono</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        sinkOne<span class=\"token punctuation\">.</span><span class=\"token function\">emitValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Reactor\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FAIL_FAST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sinkOne<span class=\"token punctuation\">.</span><span class=\"token function\">emitValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi Reactor\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FAIL_FAST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sinkOne<span class=\"token punctuation\">.</span><span class=\"token function\">emitValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FAIL_FAST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        mono<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# Subscriber1 {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mono<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# Subscriber2 {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"sinksmany\" style=\"position:relative;\"><a href=\"#sinksmany\" aria-label=\"sinksmany permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sinks.Many</h4>\n<blockquote>\n<p>여러 건의 데이터를 여러가지 방식으로 전송하는 기능을 정의해 둔 기능 명세입니다. Sinks.One 의 경우 단순히 한건의 데이터를 emit 하는 한가지 기능만 제공하기 때문에 별도의 Spec 이 제공되지 않고 기본 스펙을 사용하지만, Sinks.many 의 경우 여러가지 기능이 정의된 ManySpec 을 리턴합니다.</p>\n</blockquote>\n<ul>\n<li>UnicastSpec</li>\n<li>MulticastSpec</li>\n<li>MulticastReplaySpec</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Sinks.Many 예제\n *  - unicast()통해 단 하나의 Subscriber만 데이터를 전달 받을 수 있다\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example9_8</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Sinks<span class=\"token punctuation\">.</span>Many</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> unicastSink <span class=\"token operator\">=</span> <span class=\"token class-name\">Sinks</span><span class=\"token punctuation\">.</span><span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unicast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">onBackpressureBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Flux</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> fluxView <span class=\"token operator\">=</span> unicastSink<span class=\"token punctuation\">.</span><span class=\"token function\">asFlux</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        unicastSink<span class=\"token punctuation\">.</span><span class=\"token function\">emitNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FAIL_FAST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        unicastSink<span class=\"token punctuation\">.</span><span class=\"token function\">emitNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FAIL_FAST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        fluxView<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# Subscriber1: {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        unicastSink<span class=\"token punctuation\">.</span><span class=\"token function\">emitNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FAIL_FAST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        fluxView<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# Subscriber2: {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Sinks.Many 예제\n *  - multicast()를 사용해서 하나 이상의 Subscriber에게 데이터를 emit하는 예제\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example9_9</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Sinks<span class=\"token punctuation\">.</span>Many</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> multicastSink <span class=\"token operator\">=</span>\n                <span class=\"token class-name\">Sinks</span><span class=\"token punctuation\">.</span><span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">multicast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">onBackpressureBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Flux</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> fluxView <span class=\"token operator\">=</span> multicastSink<span class=\"token punctuation\">.</span><span class=\"token function\">asFlux</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        multicastSink<span class=\"token punctuation\">.</span><span class=\"token function\">emitNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FAIL_FAST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        multicastSink<span class=\"token punctuation\">.</span><span class=\"token function\">emitNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FAIL_FAST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        fluxView<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# Subscriber1: {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fluxView<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# Subscriber2: {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        multicastSink<span class=\"token punctuation\">.</span><span class=\"token function\">emitNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FAIL_FAST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * Sinks.Many 예제\n *  - replay()를 사용하여 이미 emit된 데이터 중에서 특정 개수의 최신 데이터만 전달하는 예제\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Example9_10</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Sinks<span class=\"token punctuation\">.</span>Many</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> replaySink <span class=\"token operator\">=</span> <span class=\"token class-name\">Sinks</span><span class=\"token punctuation\">.</span><span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Flux</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> fluxView <span class=\"token operator\">=</span> replaySink<span class=\"token punctuation\">.</span><span class=\"token function\">asFlux</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        replaySink<span class=\"token punctuation\">.</span><span class=\"token function\">emitNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FAIL_FAST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        replaySink<span class=\"token punctuation\">.</span><span class=\"token function\">emitNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FAIL_FAST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        replaySink<span class=\"token punctuation\">.</span><span class=\"token function\">emitNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FAIL_FAST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        fluxView<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# Subscriber1: {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        replaySink<span class=\"token punctuation\">.</span><span class=\"token function\">emitNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FAIL_FAST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        fluxView<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">-></span> log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"# Subscriber2: {}\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/posts/2023-05-21---reactive-ch9//posts/reactive-ch9","tagSlugs":["/tag/---/","/tag/-/"]},"frontmatter":{"date":"2023-05-21T23:46:37.121Z","description":"책 읽은거 정리하기, 스프링으로 시작하는 리액티브 프로그래밍 ","tags":["스프링으로 시작하는 리액티브 프로그래밍","리액티브 프로그래밍"],"title":"Chapter 9. Sinks","socialImage":null}}},"pageContext":{"slug":"/posts/2023-05-21---reactive-ch9//posts/reactive-ch9"}},"staticQueryHashes":["251939775","2764776372","401334301"]}